// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: C:/Users/WinD/Documents/Prog/Jflex/VhdlSyntax.flex

/*
 * ORIGINAL VERSION SOURCE LINK
 * https://github.com/logisim-evolution/
 *
 */

/*
 * THIS IS MY VERSION
 * File current version https://github.com/Var7600/VHDL-GENERATOR
 */

//
//   lexical analyzer to identify simple VHDL SYNTAX/KEYWORDS
//
package vhdlgenerator.texteditor;

import java.util.LinkedList;

/**
 * this class parse the the Editor code to generated the List of Token to
 * highlight. <a href="https://www.jflex.de/">JFlex</a>
 */
@SuppressWarnings("fallthrough")
public class VhdlSyntax
{

	/** This character denotes the end of file. */
	public static final int YYEOF = -1;

	/** Initial size of the lookahead buffer. */
	private static final int ZZ_BUFFERSIZE = 16384;

	/** Lexical states. */
	public static final int YYINITIAL = 0;

	/**
	 * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
	 * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l at the
	 * beginning of a line l is of the form l = 2*k, k a non negative integer
	 */
	private static final int ZZ_LEXSTATE[] = { 0, 0 };

	/**
	 * Top-level table for translating characters to character classes
	 */
	private static final int[] ZZ_CMAP_TOP = zzUnpackcmap_top();

	private static final String ZZ_CMAP_TOP_PACKED_0 = "\1\0\1\u0100\36\u0200\1\u0300\1\u0400\266\u0200\10\u0500\u1020\u0200";

	private static int[] zzUnpackcmap_top()
	{
		int[] result = new int[4352];
		int offset = 0;
		offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackcmap_top(String packed, int offset, int[] result)
	{
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l)
		{
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/**
	 * Second-level tables for translating characters to character classes
	 */
	private static final int[] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

	private static final String ZZ_CMAP_BLOCKS_PACKED_0 = "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\1"
			+ "\3\0\1\6\1\0\1\7\1\10\2\0\1\11\2\0" + "\1\12\2\0\2\13\10\14\7\0\1\15\1\16\1\17"
			+ "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27" + "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"
			+ "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\0" + "\1\47\2\0\1\50\1\0\1\15\1\16\1\17\1\20"
			+ "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30" + "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"
			+ "\1\41\1\42\1\43\1\44\1\45\1\46\12\0\1\3" + "\252\0\2\51\115\0\1\52\u01a8\0\2\3\u0100\0\1\53"
			+ "\325\0\u0100\3";

	private static int[] zzUnpackcmap_blocks()
	{
		int[] result = new int[1536];
		int offset = 0;
		offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackcmap_blocks(String packed, int offset, int[] result)
	{
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l)
		{
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/**
	 * Translates DFA states to action switch labels.
	 */
	private static final int[] ZZ_ACTION = zzUnpackAction();

	private static final String ZZ_ACTION_PACKED_0 = "\1\0\1\1\3\2\1\3\1\4\3\1\24\3\2\1"
			+ "\17\0\1\5\10\3\1\0\5\3\1\0\4\3\1\0" + "\7\3\1\0\3\3\1\6\1\3\2\6\3\3\1\0"
			+ "\6\3\1\4\12\3\1\0\6\3\1\0\4\3\1\0" + "\3\3\1\0\2\3\1\0\1\6\6\0\1\7\30\0"
			+ "\3\3\1\0\3\3\1\0\2\3\1\10\4\3\1\10" + "\3\3\1\0\2\3\1\0\1\3\1\0\15\3\3\0"
			+ "\5\3\1\0\10\3\1\0\5\3\1\0\5\3\1\0" + "\2\3\26\0\1\11\11\0\1\11\2\3\1\0\2\3"
			+ "\1\0\1\3\1\0\3\3\1\0\3\3\1\0\1\3" + "\1\0\2\3\1\0\1\3\2\0\7\3\1\0\1\3"
			+ "\2\0\4\3\2\0\3\3\1\0\3\3\1\0\5\3" + "\1\0\1\3\1\7\1\3\1\0\1\3\21\0\1\11"
			+ "\6\0\1\3\1\0\1\3\1\0\2\3\1\0\2\3" + "\1\0\1\3\1\0\1\3\1\0\1\3\1\0\5\3"
			+ "\2\0\3\3\2\0\2\3\1\0\1\3\1\0\2\3" + "\1\0\2\3\22\0\1\3\1\0\1\3\1\0\2\3"
			+ "\1\0\2\3\1\0\1\3\1\0\1\3\1\0\1\3" + "\1\0\2\3\1\0\3\3\1\0\1\3\2\0\1\3"
			+ "\1\0\1\3\1\0\1\3\12\0\1\3\2\0\1\3" + "\1\10\1\0\1\3\1\0\1\3\2\0\1\3\1\0"
			+ "\2\3\1\10\2\0\1\11\4\0\1\3\1\0\1\3" + "\1\0\1\3\1\0\1\3\1\0\1\3\7\0\1\10"
			+ "\1\3\1\0\1\10\3\0\2\3\3\0\2\3\2\0" + "\1\3\1\0\1\3\1\0\1\3\1\0\1\3\1\0";

	private static int[] zzUnpackAction()
	{
		int[] result = new int[503];
		int offset = 0;
		offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAction(String packed, int offset, int[] result)
	{
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l)
		{
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/**
	 * Translates a state to a row index in the transition table
	 */
	private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

	private static final String ZZ_ROWMAP_PACKED_0 = "\0\0\0\54\0\130\0\54\0\204\0\260\0\54\0\334"
			+ "\0\u0108\0\u0134\0\u0160\0\u018c\0\u01b8\0\u01e4\0\u0210\0\u023c"
			+ "\0\u0268\0\u0294\0\u02c0\0\u02ec\0\u0318\0\u0344\0\u0370\0\u039c"
			+ "\0\u03c8\0\u03f4\0\u0420\0\u044c\0\u0478\0\u04a4\0\u04d0\0\u04fc"
			+ "\0\u0528\0\u0554\0\u0580\0\u05ac\0\u05d8\0\u0604\0\u0630\0\u065c"
			+ "\0\u0688\0\u06b4\0\u06e0\0\u070c\0\u0738\0\u0764\0\u0790\0\u07bc"
			+ "\0\u07e8\0\u0814\0\u0840\0\u086c\0\u0898\0\u08c4\0\u08f0\0\u091c"
			+ "\0\u0948\0\u0974\0\u09a0\0\u09cc\0\u09f8\0\u0a24\0\u0a50\0\u0a7c"
			+ "\0\u0aa8\0\u0ad4\0\u0b00\0\u0b2c\0\u0b58\0\u0b84\0\u0bb0\0\u0bdc"
			+ "\0\u0c08\0\u0c34\0\u0c60\0\u0c8c\0\u0cb8\0\u0ce4\0\u0d10\0\260"
			+ "\0\u0d3c\0\u0d68\0\54\0\u0d94\0\u0dc0\0\u0dec\0\u0e18\0\u0e44"
			+ "\0\u0e70\0\u0e9c\0\u0ec8\0\u0ef4\0\u0f20\0\260\0\u0f4c\0\u0f78"
			+ "\0\u0fa4\0\u0fd0\0\u0ffc\0\u1028\0\u1054\0\u1080\0\u10ac\0\u10d8"
			+ "\0\u1104\0\u1130\0\u115c\0\u1188\0\u11b4\0\u11e0\0\u120c\0\u1238"
			+ "\0\u1264\0\u1290\0\u12bc\0\u12e8\0\u1314\0\u1340\0\u136c\0\u1398"
			+ "\0\u13c4\0\u13f0\0\u141c\0\u1448\0\u1474\0\u14a0\0\u14cc\0\u14f8"
			+ "\0\u1524\0\u1550\0\u157c\0\54\0\u15a8\0\u15d4\0\u1600\0\u162c"
			+ "\0\u1658\0\u1684\0\u16b0\0\u16dc\0\u1708\0\u1734\0\u1760\0\u178c"
			+ "\0\u17b8\0\u17e4\0\u1810\0\u183c\0\u1868\0\u1894\0\u18c0\0\u18ec"
			+ "\0\u1918\0\u1944\0\u1970\0\u199c\0\u19c8\0\u19f4\0\u1a20\0\u1a4c"
			+ "\0\u1a78\0\u1aa4\0\u1ad0\0\u1afc\0\u1b28\0\u1b54\0\u1b80\0\u1bac"
			+ "\0\u1bd8\0\u1c04\0\u1c30\0\u1c5c\0\u1c88\0\u1cb4\0\u1ce0\0\u1d0c"
			+ "\0\u1d38\0\u1d64\0\u1d90\0\u1dbc\0\u1de8\0\u1e14\0\u1e40\0\u1e6c"
			+ "\0\u1e98\0\u1ec4\0\u1ef0\0\u1f1c\0\u1f48\0\u1f74\0\u1fa0\0\u1fcc"
			+ "\0\u1ff8\0\u2024\0\u2050\0\u207c\0\u20a8\0\u20d4\0\u2100\0\u212c"
			+ "\0\u2158\0\u2184\0\u21b0\0\u21dc\0\u2208\0\u2234\0\u2260\0\u228c"
			+ "\0\u22b8\0\u22e4\0\u2310\0\u233c\0\u2368\0\u2394\0\u23c0\0\u23ec"
			+ "\0\u2418\0\u2444\0\u2470\0\u249c\0\u24c8\0\u24f4\0\u2520\0\u254c"
			+ "\0\u2578\0\u25a4\0\u25d0\0\u25fc\0\u2628\0\u2654\0\u2680\0\u26ac"
			+ "\0\u26d8\0\u2704\0\u2730\0\u275c\0\u2788\0\u27b4\0\u27e0\0\u280c"
			+ "\0\u2838\0\u2864\0\u2890\0\u28bc\0\u28e8\0\u2914\0\u2940\0\u296c"
			+ "\0\54\0\u2998\0\u29c4\0\u29f0\0\u2a1c\0\u2a48\0\u2a74\0\u2aa0"
			+ "\0\u2acc\0\u2af8\0\u2b24\0\u2b50\0\u2b7c\0\u2ba8\0\u2bd4\0\u2c00"
			+ "\0\u2c2c\0\u2c58\0\u2c84\0\u2cb0\0\u2cdc\0\u2d08\0\u2d34\0\u2d60"
			+ "\0\u2d8c\0\u2db8\0\u2de4\0\u2e10\0\u2e3c\0\u2e68\0\u2e94\0\u2ec0"
			+ "\0\u2eec\0\u2f18\0\u2f44\0\u2f70\0\u2f9c\0\u2fc8\0\u2ff4\0\u3020"
			+ "\0\u304c\0\u3078\0\u30a4\0\u30d0\0\u30fc\0\u3128\0\u3154\0\u3180"
			+ "\0\u31ac\0\u31d8\0\u3204\0\u3230\0\u325c\0\u3288\0\u32b4\0\u32e0"
			+ "\0\u330c\0\u3338\0\u3364\0\u3390\0\u33bc\0\u33e8\0\u3414\0\u3440"
			+ "\0\u346c\0\u3498\0\u34c4\0\260\0\u34f0\0\u351c\0\u3548\0\u3574"
			+ "\0\u35a0\0\u35cc\0\u35f8\0\u3624\0\u3650\0\u367c\0\u36a8\0\u36d4"
			+ "\0\u3700\0\u372c\0\u3758\0\u3784\0\u37b0\0\u37dc\0\u3808\0\u3834"
			+ "\0\u3860\0\u388c\0\u38b8\0\u38e4\0\u3910\0\u393c\0\u3968\0\u3994"
			+ "\0\u39c0\0\u39ec\0\u3a18\0\u3a44\0\u3a70\0\u3a9c\0\u3ac8\0\u3af4"
			+ "\0\u3b20\0\u3b4c\0\u3b78\0\u3ba4\0\u3bd0\0\u3bfc\0\u3c28\0\u3c54"
			+ "\0\u3c80\0\u3cac\0\u3cd8\0\u3d04\0\u3d30\0\u3d5c\0\u3d88\0\u3db4"
			+ "\0\u3de0\0\u3e0c\0\u3e38\0\u3e64\0\u3e90\0\u3ebc\0\u3ee8\0\u3f14"
			+ "\0\u3f40\0\u3f6c\0\u3f98\0\u3fc4\0\u3ff0\0\u401c\0\u4048\0\u4074"
			+ "\0\u40a0\0\u40cc\0\u40f8\0\u4124\0\u4150\0\u417c\0\u41a8\0\u41d4"
			+ "\0\u4200\0\u422c\0\u4258\0\u4284\0\u42b0\0\u42dc\0\u4308\0\u4334"
			+ "\0\u4360\0\u438c\0\u43b8\0\u43e4\0\u4410\0\u443c\0\u4468\0\u4494"
			+ "\0\u44c0\0\u44ec\0\u4518\0\u4544\0\u4570\0\u459c\0\u45c8\0\u45f4"
			+ "\0\u4620\0\u464c\0\u4678\0\u46a4\0\u46d0\0\u46fc\0\u4728\0\u4754"
			+ "\0\u4780\0\u47ac\0\u47d8\0\u4804\0\u4830\0\u485c\0\u4888\0\u48b4"
			+ "\0\u48e0\0\u490c\0\u4938\0\u4964\0\u4990\0\u49bc\0\u49e8\0\u4a14"
			+ "\0\u4a40\0\u4a6c\0\u4a98\0\u4ac4\0\260\0\u4af0\0\u4b1c\0\u4b48"
			+ "\0\u4b74\0\u4ba0\0\u4bcc\0\u4bf8\0\u4c24\0\u4c50\0\u4c7c\0\54"
			+ "\0\u4ca8\0\u4cd4\0\u4d00\0\u4d2c\0\u4d58\0\u4d84\0\u4db0\0\u4ddc"
			+ "\0\u4e08\0\u4e34\0\u4e60\0\u4e8c\0\u4eb8\0\u4ee4\0\u4f10\0\u4f3c"
			+ "\0\u4f68\0\u4f94\0\u4fc0\0\u2b24\0\u4fec\0\u5018\0\u5044\0\u5070"
			+ "\0\u509c\0\u50c8\0\u50f4\0\u5120\0\u514c\0\u5178\0\u51a4\0\u51d0"
			+ "\0\u51fc\0\u5228\0\u5254\0\u5280\0\u52ac\0\u52d8\0\u5304\0\u5330"
			+ "\0\u535c\0\u5388\0\u53b4\0\u53e0\0\u540c\0\u5438\0\u5464";

	private static int[] zzUnpackRowMap()
	{
		int[] result = new int[503];
		int offset = 0;
		offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackRowMap(String packed, int offset, int[] result)
	{
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length() - 1;
		while (i < l)
		{
			int high = packed.charAt(i++) << 16;
			result[j++] = high | packed.charAt(i++);
		}
		return j;
	}

	/**
	 * The transition table of the DFA
	 */
	private static final int[] ZZ_TRANS = zzUnpacktrans();

	private static final String ZZ_TRANS_PACKED_0 = "\1\2\1\3\1\4\1\0\1\3\1\5\1\6\1\7"
			+ "\1\10\1\11\1\12\2\2\1\13\1\14\1\15\1\16" + "\1\17\1\20\1\21\1\6\1\22\2\6\1\23\1\24"
			+ "\1\25\1\26\1\27\1\6\1\30\1\31\1\32\1\33" + "\1\34\1\35\1\36\2\6\1\2\1\6\1\37\1\40"
			+ "\1\2\55\0\1\3\2\0\1\3\51\0\1\4\57\0" + "\1\6\4\0\34\6\1\41\1\6\15\0\2\42\1\0"
			+ "\1\43\1\44\1\0\1\45\1\46\2\0\1\47\1\50" + "\2\0\1\51\3\0\1\52\1\53\1\54\1\55\1\56"
			+ "\1\42\1\57\2\42\1\0\1\42\2\0\1\50\1\55" + "\12\0\1\7\54\0\1\60\47\0\1\6\4\0\3\6"
			+ "\1\61\1\62\2\6\1\63\5\6\1\64\1\6\1\65" + "\3\6\1\66\1\67\1\70\6\6\1\41\1\6\1\0"
			+ "\1\71\7\0\1\6\4\0\6\6\1\72\3\6\1\73" + "\2\6\1\74\2\6\1\75\5\6\1\76\5\6\1\41"
			+ "\1\6\1\77\10\0\1\6\4\0\2\6\1\100\15\6" + "\1\101\13\6\1\41\1\6\11\0\1\6\4\0\12\6"
			+ "\1\102\5\6\1\103\13\6\1\41\1\6\1\104\10\0" + "\1\6\4\0\15\6\1\105\1\6\1\106\11\6\1\107"
			+ "\2\6\1\41\1\6\11\0\1\6\4\0\2\6\1\110" + "\7\6\1\111\5\6\1\112\5\6\1\113\5\6\1\41"
			+ "\1\6\1\114\10\0\1\6\4\0\6\6\1\115\14\6" + "\1\116\2\6\1\117\5\6\1\41\1\6\11\0\1\6"
			+ "\4\0\7\6\1\120\6\6\1\121\1\122\4\6\1\120" + "\7\6\1\41\1\6\1\0\1\123\7\0\1\6\4\0"
			+ "\2\6\1\124\7\6\1\125\5\6\1\126\13\6\1\41" + "\1\6\1\127\10\0\1\6\4\0\2\6\1\130\15\6"
			+ "\1\65\13\6\1\41\1\6\11\0\1\6\4\0\2\6" + "\1\131\3\6\1\132\11\6\1\133\5\6\1\134\5\6"
			+ "\1\41\1\6\11\0\1\6\4\0\7\6\1\120\7\6" + "\1\120\1\6\1\135\1\6\1\136\1\6\1\137\1\140"
			+ "\5\6\1\41\1\6\11\0\1\6\4\0\2\6\1\141" + "\15\6\1\142\2\6\1\143\2\6\1\144\5\6\1\41"
			+ "\1\6\11\0\1\6\4\0\2\6\1\145\3\6\1\146" + "\3\6\1\147\5\6\1\150\13\6\1\41\1\6\1\151"
			+ "\10\0\1\6\4\0\6\6\1\152\2\6\1\153\1\154" + "\2\6\1\155\5\6\1\155\1\6\1\156\1\157\5\6"
			+ "\1\41\1\6\1\160\10\0\1\6\4\0\11\6\1\135" + "\6\6\1\120\2\6\1\161\6\6\1\162\1\6\1\41"
			+ "\1\6\11\0\1\6\4\0\17\6\1\163\4\6\1\164" + "\7\6\1\41\1\6\1\0\1\165\7\0\1\6\4\0"
			+ "\2\6\1\166\31\6\1\41\1\6\11\0\1\6\4\0" + "\2\6\1\107\6\6\1\167\1\170\21\6\1\41\1\6"
			+ "\1\171\10\0\1\6\4\0\17\6\1\172\1\173\13\6" + "\1\41\1\6\25\0\1\123\6\0\1\174\1\175\4\0"
			+ "\1\123\12\0\1\123\22\0\1\176\2\0\1\177\1\160" + "\2\0\1\200\5\0\1\200\1\0\1\201\1\202\7\0"
			+ "\1\160\51\0\1\203\14\0\1\204\62\0\1\205\17\0" + "\1\206\12\0\1\206\16\0\1\207\57\0\1\210\14\0"
			+ "\1\211\57\0\1\212\21\0\1\204\14\0\1\213\23\0" + "\1\213\33\0\1\214\1\215\31\0\1\204\4\0\1\216"
			+ "\3\0\1\217\11\0\1\220\35\0\1\221\15\0\1\222" + "\2\0\1\223\56\0\1\224\27\0\1\225\3\0\1\226"
			+ "\3\0\1\227\23\0\1\227\27\0\1\230\12\0\1\231" + "\1\232\7\0\1\230\40\0\1\233\32\0\1\234\36\0"
			+ "\2\60\4\0\46\60\6\0\1\6\4\0\24\6\1\136" + "\7\6\1\41\1\6\1\0\1\7\7\0\1\6\4\0"
			+ "\4\6\1\235\27\6\1\41\1\6\11\0\1\6\4\0" + "\25\6\1\236\6\6\1\41\1\6\11\0\1\6\4\0"
			+ "\12\6\1\237\2\6\1\120\16\6\1\41\1\6\1\240" + "\10\0\1\6\4\0\5\6\1\136\26\6\1\41\1\6"
			+ "\11\0\1\6\4\0\4\6\1\241\16\6\1\242\10\6" + "\1\41\1\6\11\0\1\6\4\0\24\6\1\243\7\6"
			+ "\1\41\1\6\1\0\1\244\7\0\1\6\4\0\25\6" + "\1\245\6\6\1\41\1\6\42\0\1\244\12\0\1\244"
			+ "\7\0\1\6\4\0\10\6\1\246\23\6\1\41\1\6" + "\11\0\1\6\4\0\25\6\1\247\6\6\1\41\1\6"
			+ "\11\0\1\6\4\0\20\6\1\250\13\6\1\41\1\6" + "\11\0\1\6\4\0\5\6\1\251\12\6\1\252\13\6"
			+ "\1\41\1\6\11\0\1\6\4\0\7\6\1\253\14\6" + "\1\120\7\6\1\41\1\6\1\0\1\123\41\0\1\254"
			+ "\21\0\1\6\4\0\24\6\1\164\7\6\1\41\1\6" + "\1\0\1\165\7\0\1\6\4\0\16\6\1\255\1\256"
			+ "\14\6\1\41\1\6\11\0\1\6\4\0\24\6\1\257" + "\7\6\1\41\1\6\1\0\1\260\7\0\1\6\4\0"
			+ "\30\6\1\261\3\6\1\41\1\6\42\0\1\260\12\0" + "\1\260\7\0\1\6\4\0\24\6\1\262\7\6\1\41"
			+ "\1\6\1\0\1\263\7\0\1\6\4\0\5\6\1\120" + "\17\6\1\264\6\6\1\41\1\6\11\0\1\6\4\0"
			+ "\12\6\1\140\21\6\1\41\1\6\1\265\10\0\1\6" + "\4\0\15\6\1\266\16\6\1\41\1\6\11\0\1\6"
			+ "\4\0\15\6\1\164\16\6\1\41\1\6\11\0\1\6" + "\4\0\23\6\1\120\10\6\1\41\1\6\11\0\1\6"
			+ "\4\0\17\6\1\267\14\6\1\41\1\6\33\0\1\165" + "\31\0\1\6\4\0\17\6\1\270\14\6\1\41\1\6"
			+ "\11\0\1\6\4\0\20\6\1\271\13\6\1\41\1\6" + "\11\0\1\6\4\0\2\6\1\272\31\6\1\41\1\6"
			+ "\11\0\1\6\4\0\21\6\1\273\12\6\1\41\1\6" + "\11\0\1\6\4\0\6\6\1\274\11\6\1\275\4\6"
			+ "\1\276\6\6\1\41\1\6\11\0\1\6\4\0\3\6" + "\1\277\30\6\1\41\1\6\11\0\1\6\4\0\3\6"
			+ "\1\300\13\6\1\301\5\6\1\302\6\6\1\41\1\6" + "\11\0\1\6\4\0\20\6\1\130\13\6\1\41\1\6"
			+ "\21\0\1\303\13\0\1\304\5\0\1\305\21\0\1\6" + "\4\0\21\6\1\120\12\6\1\41\1\6\11\0\1\6"
			+ "\4\0\17\6\1\65\5\6\1\306\6\6\1\41\1\6" + "\11\0\1\6\4\0\30\6\1\120\1\140\2\6\1\41"
			+ "\1\6\11\0\1\6\4\0\23\6\1\136\1\6\1\136" + "\6\6\1\41\1\6\11\0\1\6\4\0\15\6\1\307"
			+ "\16\6\1\41\1\6\11\0\1\6\4\0\6\6\1\310" + "\25\6\1\41\1\6\11\0\1\6\4\0\11\6\1\311"
			+ "\22\6\1\41\1\6\11\0\1\6\4\0\25\6\1\120" + "\6\6\1\41\1\6\11\0\1\6\4\0\4\6\1\301"
			+ "\27\6\1\41\1\6\11\0\1\6\4\0\23\6\1\140" + "\1\312\7\6\1\41\1\6\1\0\1\313\7\0\1\6"
			+ "\4\0\20\6\1\314\13\6\1\41\1\6\11\0\1\6" + "\4\0\23\6\1\164\10\6\1\41\1\6\11\0\1\6"
			+ "\4\0\17\6\1\315\14\6\1\41\1\6\11\0\1\6" + "\4\0\4\6\1\316\3\6\1\317\2\6\1\320\2\6"
			+ "\1\136\2\6\1\321\3\6\1\322\6\6\1\41\1\6" + "\11\0\1\6\4\0\24\6\1\323\7\6\1\41\1\6"
			+ "\1\0\1\324\7\0\1\6\4\0\15\6\1\136\5\6" + "\1\136\10\6\1\41\1\6\42\0\1\324\12\0\1\324"
			+ "\7\0\1\6\4\0\15\6\1\320\11\6\1\325\4\6" + "\1\41\1\6\11\0\1\6\4\0\2\6\1\326\31\6"
			+ "\1\41\1\6\11\0\1\6\4\0\10\6\1\327\23\6" + "\1\41\1\6\11\0\1\6\4\0\2\6\1\136\12\6"
			+ "\1\136\16\6\1\41\1\6\11\0\1\6\4\0\5\6" + "\1\330\26\6\1\41\1\6\11\0\1\6\4\0\3\6"
			+ "\1\331\30\6\1\41\1\6\26\0\1\332\36\0\1\6" + "\4\0\2\6\1\333\23\6\1\334\5\6\1\41\1\6"
			+ "\11\0\1\6\4\0\21\6\1\164\12\6\1\41\1\6" + "\11\0\1\6\4\0\2\6\1\335\7\6\1\336\12\6"
			+ "\1\337\6\6\1\41\1\6\1\340\10\0\1\6\4\0" + "\6\6\1\120\25\6\1\41\1\6\24\0\1\123\40\0"
			+ "\1\6\4\0\23\6\1\341\10\6\1\41\1\6\11\0" + "\1\6\4\0\6\6\1\310\3\6\1\111\21\6\1\41"
			+ "\1\6\1\114\10\0\1\6\4\0\25\6\1\342\6\6" + "\1\41\1\6\43\0\1\343\21\0\1\6\4\0\20\6"
			+ "\1\173\13\6\1\41\1\6\11\0\1\6\4\0\23\6" + "\1\136\10\6\1\41\1\6\37\0\1\344\40\0\1\345"
			+ "\11\0\1\346\4\0\1\347\43\0\1\350\11\0\1\351" + "\26\0\1\352\53\0\1\7\12\0\1\7\43\0\1\353"
			+ "\51\0\1\354\50\0\10\355\71\0\1\356\32\0\1\357" + "\73\0\1\360\12\0\1\360\31\0\1\361\50\0\1\362"
			+ "\23\0\1\362\23\0\1\363\55\0\1\364\45\0\1\365" + "\75\0\1\366\12\0\1\366\40\0\1\367\12\0\1\367"
			+ "\23\0\1\370\74\0\1\371\50\0\1\372\52\0\1\371" + "\12\0\1\371\22\0\1\373\57\0\1\374\23\0\1\374"
			+ "\34\0\1\365\63\0\1\375\34\0\1\376\61\0\1\377" + "\37\0\1\u0100\55\0\1\u0101\51\0\1\u0102\66\0\1\u0103"
			+ "\31\0\1\6\4\0\6\6\1\u0104\25\6\1\41\1\6" + "\11\0\1\6\4\0\6\6\1\112\25\6\1\41\1\6"
			+ "\11\0\1\6\4\0\2\6\1\u0105\31\6\1\41\1\6" + "\20\0\1\u0106\44\0\1\6\4\0\11\6\1\u0107\22\6"
			+ "\1\41\1\6\11\0\1\6\4\0\2\6\1\251\31\6" + "\1\41\1\6\11\0\1\6\4\0\6\6\1\u0108\25\6"
			+ "\1\41\1\6\24\0\1\u0109\40\0\1\6\4\0\23\6" + "\1\u010a\10\6\1\41\1\6\11\0\1\6\4\0\12\6"
			+ "\1\310\21\6\1\41\1\6\1\u010b\10\0\1\6\4\0" + "\34\6\1\41\1\u010c\11\0\1\6\4\0\4\6\1\u010d"
			+ "\27\6\1\41\1\6\11\0\1\6\4\0\32\6\1\120" + "\1\6\1\41\1\6\11\0\1\6\4\0\15\6\1\u010e"
			+ "\16\6\1\41\1\6\11\0\1\6\4\0\7\6\1\236" + "\24\6\1\41\1\6\53\0\1\u010f\11\0\1\6\4\0"
			+ "\21\6\1\u0110\12\6\1\41\1\6\11\0\1\6\4\0" + "\7\6\1\u0111\14\6\1\u0112\7\6\1\41\1\6\1\0"
			+ "\1\u0113\7\0\1\6\4\0\4\6\1\u0114\27\6\1\41" + "\1\6\22\0\1\u0115\42\0\1\6\4\0\17\6\1\u0116"
			+ "\14\6\1\41\1\6\11\0\1\6\4\0\6\6\1\120" + "\3\6\1\u0117\21\6\1\41\1\6\1\u0118\23\0\1\123"
			+ "\3\0\1\u0118\23\0\1\u0118\10\0\1\6\4\0\12\6" + "\1\u0119\21\6\1\41\1\6\1\u011a\42\0\1\123\21\0"
			+ "\1\6\4\0\24\6\1\334\7\6\1\41\1\6\1\0" + "\1\u011b\7\0\1\6\4\0\4\6\1\u011c\27\6\1\41"
			+ "\1\6\11\0\1\6\4\0\6\6\1\u011d\25\6\1\41" + "\1\6\11\0\1\6\4\0\26\6\1\130\5\6\1\41"
			+ "\1\6\11\0\1\6\4\0\23\6\1\u011e\10\6\1\41" + "\1\6\11\0\1\6\4\0\26\6\1\144\5\6\1\41"
			+ "\1\6\11\0\1\6\4\0\23\6\1\u011f\10\6\1\41" + "\1\6\11\0\1\6\4\0\26\6\1\140\5\6\1\41"
			+ "\1\6\11\0\1\6\4\0\6\6\1\u0120\25\6\1\41" + "\1\6\11\0\1\6\4\0\6\6\1\307\25\6\1\41"
			+ "\1\6\11\0\1\6\4\0\23\6\1\u0121\10\6\1\41" + "\1\6\11\0\1\6\4\0\14\6\1\u0122\17\6\1\41"
			+ "\1\6\2\0\1\u0123\6\0\1\6\4\0\6\6\1\u0124" + "\25\6\1\41\1\6\41\0\1\u0125\44\0\1\u0123\23\0"
			+ "\1\u0123\21\0\1\u0126\40\0\1\6\4\0\26\6\1\u0127" + "\5\6\1\41\1\6\11\0\1\6\4\0\15\6\1\120"
			+ "\16\6\1\41\1\6\11\0\1\6\4\0\17\6\1\120" + "\14\6\1\41\1\6\11\0\1\6\4\0\6\6\1\u0128"
			+ "\25\6\1\41\1\6\11\0\1\6\4\0\12\6\1\u0129" + "\12\6\1\u012a\6\6\1\41\1\6\1\u012b\27\0\1\u012b"
			+ "\12\0\1\u012c\10\0\1\u012b\10\0\1\6\4\0\4\6" + "\1\u012d\27\6\1\41\1\6\11\0\1\6\4\0\10\6"
			+ "\1\164\23\6\1\41\1\6\11\0\1\6\4\0\20\6" + "\1\u012e\13\6\1\41\1\6\11\0\1\6\4\0\12\6"
			+ "\1\u012f\21\6\1\41\1\6\1\u0130\10\0\1\6\4\0" + "\6\6\1\u0131\25\6\1\41\1\6\11\0\1\6\4\0"
			+ "\20\6\1\u0108\13\6\1\41\1\6\11\0\1\6\4\0" + "\26\6\1\u0132\5\6\1\41\1\6\11\0\1\6\4\0"
			+ "\12\6\1\u0133\21\6\1\41\1\6\1\u0134\27\0\1\u0134" + "\23\0\1\u0134\10\0\1\6\4\0\6\6\1\u0135\25\6"
			+ "\1\41\1\6\11\0\1\6\4\0\23\6\1\u0136\10\6" + "\1\41\1\6\11\0\1\6\4\0\17\6\1\u0137\14\6"
			+ "\1\41\1\6\11\0\1\6\4\0\34\6\1\41\1\u0138" + "\11\0\1\6\4\0\25\6\1\u0139\6\6\1\41\1\6"
			+ "\35\0\1\u013a\27\0\1\6\4\0\17\6\1\u013b\14\6" + "\1\41\1\6\11\0\1\6\4\0\6\6\1\u013c\25\6"
			+ "\1\41\1\6\11\0\1\6\4\0\7\6\1\u013d\24\6" + "\1\41\1\6\11\0\1\6\4\0\25\6\1\u0105\6\6"
			+ "\1\41\1\6\11\0\1\6\4\0\12\6\1\307\21\6" + "\1\41\1\6\1\u013e\42\0\1\u0106\21\0\1\6\4\0"
			+ "\12\6\1\u013f\21\6\1\41\1\6\1\u0140\10\0\1\6" + "\4\0\11\6\1\120\22\6\1\41\1\6\27\0\1\123"
			+ "\70\0\1\u0141\50\0\1\u0142\56\0\1\265\33\0\1\u0143"
			+ "\53\0\1\u0144\53\0\1\u0145\70\0\1\u0146\65\0\1\u0147"
			+ "\43\0\1\u0148\26\0\10\u0149\56\0\1\u014a\23\0\1\u014a"
			+ "\23\0\1\u014b\53\0\1\371\47\0\1\u014c\100\0\1\u014d" + "\43\0\1\u014e\45\0\1\371\52\0\1\360\70\0\1\u014f"
			+ "\53\0\1\u0150\53\0\1\u0151\37\0\1\u0152\47\0\1\371"
			+ "\54\0\1\u014e\53\0\1\u0153\56\0\1\370\63\0\1\u0154"
			+ "\35\0\1\u0155\54\0\1\u0156\66\0\1\u0157\62\0\1\360" + "\20\0\1\6\4\0\24\6\1\u0105\7\6\1\41\1\6"
			+ "\1\0\1\u0106\7\0\1\6\4\0\24\6\1\120\7\6" + "\1\41\1\6\1\0\1\123\40\0\1\123\12\0\1\123"
			+ "\7\0\1\6\4\0\12\6\1\u0158\21\6\1\41\1\6" + "\1\u0159\10\0\1\6\4\0\23\6\1\140\10\6\1\41"
			+ "\1\6\41\0\1\265\23\0\1\6\4\0\12\6\1\u015a" + "\21\6\1\41\1\6\1\u015b\34\0\1\123\27\0\1\6"
			+ "\4\0\27\6\1\u015c\4\6\1\41\1\6\11\0\1\6" + "\4\0\14\6\1\120\17\6\1\41\1\6\2\0\1\123"
			+ "\6\0\1\6\4\0\6\6\1\u015d\25\6\1\41\1\6" + "\45\0\1\u015e\17\0\1\6\4\0\20\6\1\u015f\13\6"
			+ "\1\41\1\6\11\0\1\6\4\0\12\6\1\u0160\21\6" + "\1\41\1\6\1\u0161\10\0\1\6\4\0\25\6\1\u0162"
			+ "\6\6\1\41\1\6\43\0\1\u0163\21\0\1\6\4\0" + "\20\6\1\u0164\13\6\1\41\1\6\36\0\1\u0165\26\0"
			+ "\1\6\4\0\25\6\1\u0166\6\6\1\41\1\6\11\0" + "\1\6\4\0\7\6\1\120\24\6\1\41\1\6\25\0"
			+ "\1\123\37\0\1\6\4\0\25\6\1\251\6\6\1\41" + "\1\6\43\0\1\u0167\34\0\1\204\40\0\1\6\4\0"
			+ "\25\6\1\u0168\6\6\1\41\1\6\11\0\1\6\4\0" + "\23\6\1\u0169\10\6\1\41\1\6\11\0\1\6\4\0"
			+ "\5\6\1\u0136\26\6\1\41\1\6\11\0\1\6\4\0" + "\25\6\1\u016a\6\6\1\41\1\6\11\0\1\6\4\0"
			+ "\10\6\1\u016b\23\6\1\41\1\6\11\0\1\6\4\0" + "\2\6\1\u016c\31\6\1\41\1\6\11\0\1\6\4\0"
			+ "\2\6\1\315\31\6\1\41\1\6\20\0\1\u016d\44\0" + "\1\6\4\0\23\6\1\u0137\10\6\1\41\1\6\20\0"
			+ "\1\u016e\74\0\1\u013a\23\0\1\6\4\0\23\6\1\u016f" + "\10\6\1\41\1\6\11\0\1\6\4\0\23\6\1\u0105"
			+ "\10\6\1\41\1\6\11\0\1\6\4\0\25\6\1\u0170" + "\6\6\1\41\1\6\11\0\1\6\4\0\21\6\1\u0171"
			+ "\12\6\1\41\1\6\43\0\1\u0172\47\0\1\u0173\25\0" + "\1\6\4\0\6\6\1\u0174\25\6\1\41\1\6\11\0"
			+ "\1\6\4\0\23\6\1\u0175\10\6\1\41\1\6\11\0" + "\1\6\4\0\24\6\1\63\7\6\1\41\1\6\1\0"
			+ "\1\u0176\40\0\1\u0176\12\0\1\u0176\7\0\1\6\4\0" + "\4\6\1\140\27\6\1\41\1\6\11\0\1\6\4\0"
			+ "\23\6\1\310\10\6\1\41\1\6\11\0\1\6\4\0" + "\17\6\1\u0177\14\6\1\41\1\6\35\0\1\u0178\27\0"
			+ "\1\6\4\0\23\6\1\264\10\6\1\41\1\6\11\0" + "\1\6\4\0\6\6\1\u0175\25\6\1\41\1\6\11\0"
			+ "\1\6\4\0\2\6\1\307\31\6\1\41\1\6\11\0" + "\1\6\4\0\15\6\1\u0179\16\6\1\41\1\6\11\0"
			+ "\1\6\4\0\32\6\1\162\1\6\1\41\1\6\20\0" + "\1\u013e\44\0\1\6\4\0\24\6\1\u017a\7\6\1\41"
			+ "\1\6\1\0\1\u017b\7\0\1\6\4\0\7\6\1\u017c" + "\24\6\1\41\1\6\33\0\1\123\31\0\1\6\4\0"
			+ "\2\6\1\u017d\31\6\1\41\1\6\20\0\1\u017e\74\0" + "\1\165\55\0\1\u017f\36\0\1\u0180\47\0\1\265\72\0"
			+ "\1\u0181\36\0\1\u0182\62\0\1\u0183\70\0\1\u0184\21\0"
			+ "\10\u0185\73\0\1\360\43\0\1\u0186\66\0\1\223\33\0"
			+ "\1\u0187\23\0\1\u0187\42\0\1\371\30\0\1\u0188\106\0"
			+ "\1\u0189\36\0\1\u018a\70\0\1\u018b\41\0\1\u018c\45\0"
			+ "\1\u018d\53\0\1\360\44\0\1\u018e\71\0\1\u018f\12\0" + "\1\u018f\7\0\1\6\4\0\25\6\1\u0190\6\6\1\41"
			+ "\1\6\43\0\1\u0191\21\0\1\6\4\0\3\6\1\u0192" + "\30\6\1\41\1\6\21\0\1\u0193\43\0\1\6\4\0"
			+ "\6\6\1\u0194\25\6\1\41\1\6\11\0\1\6\4\0" + "\2\6\1\u0195\31\6\1\41\1\6\24\0\1\u0196\40\0"
			+ "\1\6\4\0\17\6\1\u0197\14\6\1\41\1\6\11\0" + "\1\6\4\0\10\6\1\u0198\23\6\1\41\1\6\26\0"
			+ "\1\u0199\36\0\1\6\4\0\2\6\1\u019a\31\6\1\41" + "\1\6\20\0\1\u019b\44\0\1\6\4\0\17\6\1\u019c"
			+ "\14\6\1\41\1\6\35\0\1\u019d\27\0\1\6\4\0" + "\20\6\1\120\13\6\1\41\1\6\50\0\1\123\14\0"
			+ "\1\6\4\0\12\6\1\u019e\21\6\1\41\1\6\1\u019f" + "\10\0\1\6\4\0\2\6\1\u01a0\7\6\1\u01a1\21\6"
			+ "\1\41\1\6\1\u01a2\10\0\1\6\4\0\12\6\1\u0137" + "\21\6\1\41\1\6\1\u013a\10\0\1\6\4\0\6\6"
			+ "\1\u01a3\25\6\1\41\1\6\11\0\1\6\4\0\23\6" + "\1\251\10\6\1\41\1\6\26\0\1\165\66\0\1\u0167"
			+ "\23\0\1\6\4\0\2\6\1\u01a4\31\6\1\41\1\6" + "\11\0\1\6\4\0\12\6\1\u01a5\21\6\1\41\1\6"
			+ "\1\u01a6\10\0\1\6\4\0\20\6\1\u01a7\13\6\1\41" + "\1\6\30\0\1\u01a6\23\0\1\u01a6\35\0\1\u01a8\26\0"
			+ "\1\6\4\0\5\6\1\273\16\6\1\u0105\7\6\1\41" + "\1\6\1\0\1\u0106\7\0\1\6\4\0\5\6\1\120"
			+ "\26\6\1\41\1\6\43\0\1\u01a9\21\0\1\6\4\0" + "\10\6\1\u01aa\23\6\1\41\1\6\26\0\1\u01ab\36\0"
			+ "\1\6\4\0\20\6\1\u01ac\13\6\1\41\1\6\11\0" + "\1\6\4\0\21\6\1\321\12\6\1\41\1\6\37\0"
			+ "\1\u01ad\25\0\1\6\4\0\6\6\1\u01ae\25\6\1\41" + "\1\6\11\0\1\6\4\0\3\6\1\111\30\6\1\41"
			+ "\1\6\21\0\1\114\62\0\1\u013a\23\0\1\u013a\23\0" + "\1\u01af\57\0\1\u011a\23\0\1\u011a\22\0\1\123\66\0"
			+ "\1\u01b0\54\0\1\165\32\0\10\6\51\0\1\u01b1\65\0" + "\1\u01b2\53\0\1\u01b3\36\0\1\u01b4\3\0\1\46\20\0"
			+ "\1\u01b5\33\0\1\371\63\0\1\u01b6\60\0\1\u01b7\12\0" + "\1\u01b7\22\0\1\u0152\71\0\1\222\12\0\1\222\16\0"
			+ "\1\u01b8\44\0\1\6\4\0\6\6\1\u01b9\25\6\1\41" + "\1\6\24\0\1\u01ba\40\0\1\6\4\0\26\6\1\u01a0"
			+ "\5\6\1\41\1\6\44\0\1\u01bb\20\0\1\6\4\0" + "\4\6\1\u01bc\27\6\1\41\1\6\11\0\1\6\4\0"
			+ "\17\6\1\u01bd\14\6\1\41\1\6\22\0\1\u01be\42\0" + "\1\6\4\0\6\6\1\u019a\25\6\1\41\1\6\11\0"
			+ "\1\6\4\0\26\6\1\u01bf\5\6\1\41\1\6\44\0" + "\1\u01c0\20\0\1\6\4\0\17\6\1\140\14\6\1\41"
			+ "\1\6\35\0\1\265\27\0\1\6\4\0\17\6\1\320" + "\14\6\1\41\1\6\35\0\1\350\27\0\1\6\4\0"
			+ "\20\6\1\310\13\6\1\41\1\6\36\0\1\u010b\26\0" + "\1\6\4\0\25\6\1\164\6\6\1\41\1\6\11\0"
			+ "\1\6\4\0\4\6\1\120\27\6\1\41\1\6\22\0" + "\1\123\42\0\1\6\4\0\23\6\1\u01bd\10\6\1\41"
			+ "\1\6\11\0\1\6\4\0\15\6\1\u01bd\16\6\1\41" + "\1\6\11\0\1\6\4\0\27\6\1\u01c1\4\6\1\41"
			+ "\1\6\45\0\1\u01c2\17\0\1\6\4\0\17\6\1\u0136" + "\14\6\1\41\1\6\35\0\1\u0146\42\0\1\u01c3\40\0"
			+ "\1\6\4\0\34\6\1\41\1\u01c4\53\0\1\u01c5\11\0" + "\1\6\4\0\10\6\1\u01c6\23\6\1\41\1\6\36\0"
			+ "\1\u0109\26\0\1\6\4\0\4\6\1\u01c7\27\6\1\41" + "\1\6\41\0\1\u01c8\40\0\1\u01c9\55\0\1\u01ca\23\0"
			+ "\1\u01ca\25\0\1\u01cb\47\0\1\u018d\53\0\1\205\51\0"
			+ "\1\u01cc\53\0\1\u01cd\57\0\1\u01ce\51\0\1\u01cf\42\0" + "\1\6\4\0\4\6\1\u01d0\27\6\1\41\1\6\22\0"
			+ "\1\u01d1\74\0\1\165\21\0\1\6\4\0\25\6\1\u01d2" + "\6\6\1\41\1\6\43\0\1\u01d3\21\0\1\6\4\0"
			+ "\23\6\1\u01d4\10\6\1\41\1\6\41\0\1\u01d5\23\0" + "\1\6\4\0\6\6\1\u01bd\25\6\1\41\1\6\24\0"
			+ "\1\u01c8\70\0\1\123\23\0\1\6\4\0\6\6\1\u01d6" + "\25\6\1\41\1\6\24\0\1\u01d7\40\0\1\6\4\0"
			+ "\12\6\1\u01d8\21\6\1\41\1\6\1\u01d9\10\0\1\6" + "\4\0\25\6\1\u0136\6\6\1\41\1\6\30\0\1\u01d9"
			+ "\23\0\1\u01d9\34\0\1\u01da\71\0\1\u01db\33\0\1\u01dc" + "\54\0\1\360\72\0\1\u01dd\43\0\1\u01de\21\0\1\6"
			+ "\4\0\25\6\1\273\6\6\1\41\1\6\43\0\1\344" + "\21\0\1\6\4\0\20\6\1\u01a3\13\6\1\41\1\6"
			+ "\36\0\1\u01af\26\0\1\6\4\0\2\6\1\u011c\31\6" + "\1\41\1\6\20\0\1\u01df\44\0\1\6\4\0\5\6"
			+ "\1\315\26\6\1\41\1\6\23\0\1\u016d\41\0\1\6" + "\4\0\4\6\1\u01e0\17\6\1\u01e1\7\6\1\41\1\6"
			+ "\1\0\1\u01e2\20\0\1\u01e3\17\0\1\u01e2\12\0\1\u01e2"
			+ "\24\0\1\371\72\0\1\u01b5\47\0\1\u01e4\42\0\1\u01e5" + "\23\0\1\u01e5\42\0\1\u01e6\21\0\1\6\4\0\34\6"
			+ "\1\41\1\u01e7\11\0\1\6\4\0\34\6\1\41\1\u01e8" + "\53\0\1\u01e9\53\0\1\u01ea\20\0\1\225\71\0\1\u01eb"
			+ "\45\0\1\u019f\23\0\1\u019f\10\0\1\6\4\0\26\6" + "\1\u01ec\1\u015c\4\6\1\41\1\6\11\0\1\6\4\0"
			+ "\24\6\1\u01ed\7\6\1\41\1\6\1\0\1\u01ee\40\0" + "\1\u01ee\12\0\1\u01ee\42\0\1\u01ef\1\u015e\43\0\1\371"
			+ "\27\0\1\6\4\0\17\6\1\u01e8\14\6\1\41\1\6" + "\11\0\1\6\4\0\12\6\1\u01f0\21\6\1\41\1\6"
			+ "\1\u01f1\27\0\1\u01f1\23\0\1\u01f1\34\0\1\u01e9\27\0" + "\1\6\4\0\10\6\1\u01f2\23\6\1\41\1\6\26\0"
			+ "\1\u01f3\36\0\1\6\4\0\17\6\1\u01f4\14\6\1\41" + "\1\6\35\0\1\u01f5\27\0\1\6\4\0\6\6\1\u01f6"
			+ "\25\6\1\41\1\6\24\0\1\u01f7\40\0\1\6\4\0" + "\5\6\1\u01bd\26\6\1\41\1\6\23\0\1\u01c8\33\0";

	private static int[] zzUnpacktrans()
	{
		int[] result = new int[21648];
		int offset = 0;
		offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpacktrans(String packed, int offset, int[] result)
	{
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l)
		{
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			value--;
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/** Error code for "Unknown internal scanner error". */
	private static final int ZZ_UNKNOWN_ERROR = 0;
	/** Error code for "could not match input". */
	private static final int ZZ_NO_MATCH = 1;
	/** Error code for "pushback value was too large". */
	private static final int ZZ_PUSHBACK_2BIG = 2;

	/**
	 * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
	 * {@link #ZZ_PUSHBACK_2BIG} respectively.
	 */
	private static final String ZZ_ERROR_MSG[] = { "Unknown internal scanner error", "Error: could not match input",
			"Error: pushback value was too large" };

	/**
	 * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
	 */
	private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

	private static final String ZZ_ATTRIBUTE_PACKED_0 = "\1\0\1\11\1\1\1\11\2\1\1\11\31\1\17\0"
			+ "\11\1\1\0\5\1\1\0\4\1\1\0\7\1\1\0" + "\6\1\1\11\3\1\1\0\21\1\1\0\6\1\1\0"
			+ "\4\1\1\0\3\1\1\0\2\1\1\0\1\1\6\0" + "\1\11\30\0\3\1\1\0\3\1\1\0\13\1\1\0"
			+ "\2\1\1\0\1\1\1\0\15\1\3\0\5\1\1\0" + "\10\1\1\0\5\1\1\0\5\1\1\0\2\1\26\0"
			+ "\1\11\11\0\3\1\1\0\2\1\1\0\1\1\1\0" + "\3\1\1\0\3\1\1\0\1\1\1\0\2\1\1\0"
			+ "\1\1\2\0\7\1\1\0\1\1\2\0\4\1\2\0" + "\3\1\1\0\3\1\1\0\5\1\1\0\3\1\1\0"
			+ "\1\1\21\0\1\1\6\0\1\1\1\0\1\1\1\0" + "\2\1\1\0\2\1\1\0\1\1\1\0\1\1\1\0"
			+ "\1\1\1\0\5\1\2\0\3\1\2\0\2\1\1\0" + "\1\1\1\0\2\1\1\0\2\1\22\0\1\1\1\0"
			+ "\1\1\1\0\2\1\1\0\2\1\1\0\1\1\1\0" + "\1\1\1\0\1\1\1\0\2\1\1\0\3\1\1\0"
			+ "\1\1\2\0\1\1\1\0\1\1\1\0\1\1\12\0" + "\1\1\2\0\2\1\1\0\1\1\1\0\1\1\2\0"
			+ "\1\1\1\0\2\1\1\11\2\0\1\1\4\0\1\1" + "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"
			+ "\7\0\2\1\1\0\1\1\3\0\2\1\3\0\2\1" + "\2\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1" + "\1\0";

	private static int[] zzUnpackAttribute()
	{
		int[] result = new int[503];
		int offset = 0;
		offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAttribute(String packed, int offset, int[] result)
	{
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l)
		{
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/** Input device. */
	private java.io.Reader zzReader;

	/** Current state of the DFA. */
	private int zzState;

	/** Current lexical state. */
	private int zzLexicalState = YYINITIAL;

	/**
	 * This buffer contains the current text to be matched and is the source of the
	 * {@link #yytext()} string.
	 */
	private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

	/** Text position at the last accepting state. */
	private int zzMarkedPos;

	/** Current text position in the buffer. */
	private int zzCurrentPos;

	/** Marks the beginning of the {@link #yytext()} string in the buffer. */
	private int zzStartRead;

	/** Marks the last character in the buffer, that has been read from input. */
	private int zzEndRead;

	/**
	 * Whether the scanner is at the end of file.
	 *
	 * @see #yyatEOF
	 */
	private boolean zzAtEOF;

	/**
	 * The number of occupied positions in {@link #zzBuffer} beyond
	 * {@link #zzEndRead}.
	 *
	 * <p>
	 * When a lead/high surrogate has been read from the input stream into the final
	 * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will
	 * have a value of 0.
	 */
	private int zzFinalHighSurrogate = 0;

	/** Number of newlines encountered up to the start of the matched text. */
	@SuppressWarnings("unused")
	private int yyline;

	/**
	 * Number of characters from the last newline up to the start of the matched
	 * text.
	 */
	@SuppressWarnings("unused")
	private int yycolumn;

	/** Number of characters up to the start of the matched text. */
	@SuppressWarnings("unused")
	private long yychar;

	/** Whether the scanner is currently at the beginning of a line. */
	@SuppressWarnings("unused")
	private boolean zzAtBOL = true;

	/** Whether the user-EOF-code has already been executed. */
	@SuppressWarnings("unused")
	private boolean zzEOFDone;

	/* user code: */
	// a linkedList of token to highlight
	private LinkedList<Token> list_token = new LinkedList<>();

	/**
	 * this Constructor must be here because JFlex does not generate a no-parameter
	 * constructor.
	 */
	public VhdlSyntax()
	{
	}

	/**
	 * the list of Token to Highlight.
	 *
	 * @return the list of Token to Highlight.
	 */
	public LinkedList<Token> getListToken()
	{
		return this.list_token;
	}

	private void addToken(int type, String text, int offset, int length)
	{
		list_token.add(new Token(type, text, offset, length));

	}

	/**
	 * Creates a new scanner
	 *
	 * @param in the java.io.Reader to read input from.
	 */
	public VhdlSyntax(java.io.Reader in)
	{
		this.zzReader = in;
	}

	/**
	 * Returns the maximum size of the scanner buffer, which limits the size of
	 * tokens.
	 */
	private int zzMaxBufferLen()
	{
		return Integer.MAX_VALUE;
	}

	/** Whether the scanner buffer can grow to accommodate a larger token. */
	private boolean zzCanGrow()
	{
		return true;
	}

	/**
	 * Translates raw input code points to DFA table row
	 */
	private static int zzCMap(int input)
	{
		int offset = input & 255;
		return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
	}

	/**
	 * Refills the input buffer.
	 *
	 * @return {@code false} iff there was new input.
	 * @exception java.io.IOException if any I/O-Error occurs
	 */
	private boolean zzRefill() throws java.io.IOException
	{

		/* first: make room (if you can) */
		if (zzStartRead > 0)
		{
			zzEndRead += zzFinalHighSurrogate;
			zzFinalHighSurrogate = 0;
			System.arraycopy(zzBuffer, zzStartRead, zzBuffer, 0, zzEndRead - zzStartRead);

			/* translate stored positions */
			zzEndRead -= zzStartRead;
			zzCurrentPos -= zzStartRead;
			zzMarkedPos -= zzStartRead;
			zzStartRead = 0;
		}

		/* is the buffer big enough? */
		if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow())
		{
			/* if not, and it can grow: blow it up */
			char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
			System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
			zzBuffer = newBuffer;
			zzEndRead += zzFinalHighSurrogate;
			zzFinalHighSurrogate = 0;
		}

		/* fill the buffer with new input */
		int requested = zzBuffer.length - zzEndRead;
		int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

		/* not supposed to occur according to specification of java.io.Reader */
		if (numRead == 0)
		{
			if (requested == 0)
			{
				throw new java.io.EOFException("Scan buffer limit reached [" + zzBuffer.length + "]");
			} else
			{
				throw new java.io.IOException(
						"Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
			}
		}
		if (numRead > 0)
		{
			zzEndRead += numRead;
			if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1]))
			{
				if (numRead == requested)
				{ // We requested too few chars to encode a full Unicode character
					--zzEndRead;
					zzFinalHighSurrogate = 1;
				} else
				{ // There is room in the buffer for at least one more char
					int c = zzReader.read(); // Expecting to read a paired low surrogate char
					if (c == -1)
					{
						return true;
					} else
					{
						zzBuffer[zzEndRead++] = (char) c;
					}
				}
			}
			/* potentially more input available */
			return false;
		}

		/* numRead < 0 ==> end of stream */
		return true;
	}

	/**
	 * Closes the input reader.
	 *
	 * @throws java.io.IOException if the reader could not be closed.
	 */
	public final void yyclose() throws java.io.IOException
	{
		zzAtEOF = true; // indicate end of file
		zzEndRead = zzStartRead; // invalidate buffer

		if (zzReader != null)
		{
			zzReader.close();
		}
	}

	/**
	 * Resets the scanner to read from a new input stream.
	 *
	 * <p>
	 * Does not close the old reader.
	 *
	 * <p>
	 * All internal variables are reset, the old input stream <b>cannot</b> be
	 * reused (internal buffer is discarded and lost). Lexical state is set to
	 * {@code ZZ_INITIAL}.
	 *
	 * <p>
	 * Internal scan buffer is resized down to its initial length, if it has grown.
	 *
	 * @param reader The new input stream.
	 */
	public final void yyreset(java.io.Reader reader)
	{
		zzReader = reader;
		zzEOFDone = false;
		yyResetPosition();
		zzLexicalState = YYINITIAL;
		int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
		if (zzBuffer.length > initBufferSize)
		{
			zzBuffer = new char[initBufferSize];
		}
	}

	/**
	 * Resets the input position.
	 */
	private final void yyResetPosition()
	{
		zzAtBOL = true;
		zzAtEOF = false;
		zzCurrentPos = 0;
		zzMarkedPos = 0;
		zzStartRead = 0;
		zzEndRead = 0;
		zzFinalHighSurrogate = 0;
		yyline = 0;
		yycolumn = 0;
		yychar = 0L;
	}

	/**
	 * Returns whether the scanner has reached the end of the reader it reads from.
	 *
	 * @return whether the scanner has reached EOF.
	 */
	public final boolean yyatEOF()
	{
		return zzAtEOF;
	}

	/**
	 * Returns the current lexical state.
	 *
	 * @return the current lexical state.
	 */
	public final int yystate()
	{
		return zzLexicalState;
	}

	/**
	 * Enters a new lexical state.
	 *
	 * @param newState the new lexical state
	 */
	public final void yybegin(int newState)
	{
		zzLexicalState = newState;
	}

	/**
	 * Returns the text matched by the current regular expression.
	 *
	 * @return the matched text.
	 */
	public final String yytext()
	{
		return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
	}

	/**
	 * Returns the character at the given position from the matched text.
	 *
	 * <p>
	 * It is equivalent to {@code yytext().charAt(pos)}, but faster.
	 *
	 * @param position the position of the character to fetch. A value from 0 to
	 *                     {@code yylength()-1}.
	 *
	 * @return the character at {@code position}.
	 */
	public final char yycharat(int position)
	{
		return zzBuffer[zzStartRead + position];
	}

	/**
	 * How many characters were matched.
	 *
	 * @return the length of the matched text region.
	 */
	public final int yylength()
	{
		return zzMarkedPos - zzStartRead;
	}

	/**
	 * Reports an error that occurred while scanning.
	 *
	 * <p>
	 * In a well-formed scanner (no or only correct usage of {@code yypushback(int)}
	 * and a match-all fallback rule) this method will only be called with things
	 * that "Can't Possibly Happen".
	 *
	 * <p>
	 * If this method is called, something is seriously wrong (e.g. a JFlex bug
	 * producing a faulty scanner etc.).
	 *
	 * <p>
	 * Usual syntax/scanner level error handling should be done in error fallback
	 * rules.
	 *
	 * @param errorCode the code of the error message to display.
	 */
	private static void zzScanError(int errorCode)
	{
		String message;
		try
		{
			message = ZZ_ERROR_MSG[errorCode];
		} catch (ArrayIndexOutOfBoundsException e)
		{
			message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
		}

		throw new Error(message);
	}

	/**
	 * Pushes the specified amount of characters back into the input stream.
	 *
	 * <p>
	 * They will be read again by then next call of the scanning method.
	 *
	 * @param number the number of characters to be read again. This number must not
	 *                   be greater than {@link #yylength()}.
	 */
	public void yypushback(int number)
	{
		if (number > yylength())
			zzScanError(ZZ_PUSHBACK_2BIG);

		zzMarkedPos -= number;
	}

	/**
	 * Resumes scanning until the next regular expression is matched, the end of
	 * input is encountered or an I/O-Error occurs.
	 *
	 * @return the next token.
	 * @exception java.io.IOException if any I/O-Error occurs.
	 */
	public Token yylex() throws java.io.IOException
	{
		int zzInput;
		int zzAction;

		// cached fields:
		int zzCurrentPosL;
		int zzMarkedPosL;
		int zzEndReadL = zzEndRead;
		char[] zzBufferL = zzBuffer;

		int[] zzTransL = ZZ_TRANS;
		int[] zzRowMapL = ZZ_ROWMAP;
		int[] zzAttrL = ZZ_ATTRIBUTE;

		while (true)
		{
			zzMarkedPosL = zzMarkedPos;

			zzAction = -1;

			zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

			zzState = ZZ_LEXSTATE[zzLexicalState];

			// set up zzAction for empty match case:
			int zzAttributes = zzAttrL[zzState];
			if ((zzAttributes & 1) == 1)
			{
				zzAction = zzState;
			}

			zzForAction:
			{
				while (true)
				{

					if (zzCurrentPosL < zzEndReadL)
					{
						zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
						zzCurrentPosL += Character.charCount(zzInput);
					} else if (zzAtEOF)
					{
						zzInput = YYEOF;
						break zzForAction;
					} else
					{
						// store back cached positions
						zzCurrentPos = zzCurrentPosL;
						zzMarkedPos = zzMarkedPosL;
						boolean eof = zzRefill();
						// get translated positions and possibly new buffer
						zzCurrentPosL = zzCurrentPos;
						zzMarkedPosL = zzMarkedPos;
						zzBufferL = zzBuffer;
						zzEndReadL = zzEndRead;
						if (eof)
						{
							zzInput = YYEOF;
							break zzForAction;
						} else
						{
							zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
							zzCurrentPosL += Character.charCount(zzInput);
						}
					}
					int zzNext = zzTransL[zzRowMapL[zzState] + zzCMap(zzInput)];
					if (zzNext == -1)
						break zzForAction;
					zzState = zzNext;

					zzAttributes = zzAttrL[zzState];
					if ((zzAttributes & 1) == 1)
					{
						zzAction = zzState;
						zzMarkedPosL = zzCurrentPosL;
						if ((zzAttributes & 8) == 8)
							break zzForAction;
					}

				}
			}

			// store back cached position
			zzMarkedPos = zzMarkedPosL;

			if (zzInput == YYEOF && zzStartRead == zzCurrentPos)
			{
				zzAtEOF = true;
				return null;
			} else
			{
				switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction])
				{
				case 1:
				{ /* Do nothing */
				}
				// fall through
				case 10:
					break;
				case 2:
				{ /* Do nothing */
				}
				// fall through
				case 11:
					break;
				case 3:
				{
					addToken(SymbolType.IDENTIFIER, yytext(), zzStartRead, yylength());
				}
				// fall through
				case 12:
					break;
				case 4:
				{
					addToken(SymbolType.OPERATORS, yytext(), zzStartRead, yylength());
				}
				// fall through
				case 13:
					break;
				case 5:
				{
					addToken(SymbolType.COMMENT, yytext(), zzStartRead, yylength());
				}
				// fall through
				case 14:
					break;
				case 6:
				{
					addToken(SymbolType.KEYWORDS, yytext(), zzStartRead, yylength());
				}
				// fall through
				case 15:
					break;
				case 7:
				{
					addToken(SymbolType.FUNCTIONS, yytext(), zzStartRead, yylength());
				}
				// fall through
				case 16:
					break;
				case 8:
				{
					addToken(SymbolType.DATA_TYPE, yytext(), zzStartRead, yylength());
				}
				// fall through
				case 17:
					break;
				case 9:
				{
					addToken(SymbolType.KEYWORDS, yytext(), zzStartRead, yylength());
				}
				// fall through
				case 18:
					break;
				default:
					zzScanError(ZZ_NO_MATCH);
				}
			}
		}
	}

}
